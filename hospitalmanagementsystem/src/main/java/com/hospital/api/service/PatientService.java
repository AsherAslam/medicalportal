package com.hospital.api.service;import com.hospital.api.DAO.PatientDao;import com.hospital.api.model.Patient;import java.util.ArrayList;import java.util.List;public class PatientService {    synchronized public static int getLastPatientID() {        List<Patient> patients = new ArrayList<>(PatientDao.getAllPatients());        int id = 0;        for (Patient p: patients) {            if(id<p.getPatient_id())            {               id = p.getPatient_id();            }        }        return id;    }    public List<Patient> getAllPatients(){        return PatientDao.getAllPatients();    }    public static boolean checkInput(String name, String age, String address, String contact, String gender){        if(name.equalsIgnoreCase("")||                name == null ||                    checkIntegerConversion(age) || age == null ||                       address.equalsIgnoreCase("") ||                         address == null ||                          contact.equalsIgnoreCase("" ) ||                              contact == null ||                                   gender.equalsIgnoreCase("") ||                                      gender == null)        {            return false;        }        else{            return true;        }    }    public static boolean checkIntegerConversion(String txt){        try{            int num = Integer.parseInt(txt);            if(num<=0){                return true;            }            else {                return false;            }        }        catch (Exception e){            return true;        }    }    public static void addPatient(Patient obj){        PatientDao.addPatient(obj);    }    public static String[][] viewPatient(){        List<Patient> patients = new ArrayList<>(PatientDao.getAllPatients());        String data[][] =new String[patients.size()][6];        int row = 0;        for (Patient p: patients) {            data[row][0] = String.valueOf(p.getPatient_id());            data[row][1] = p.getName();            data[row][2] = String.valueOf(p.getAge());            data[row][3] = p.getAddress();            data[row][4] = p.getContact();            data[row][5] = p.getGender();            row++;        }        return data;    }    public static String[] getPatientID(){        List<Patient> patients = new ArrayList<>(PatientDao.getAllPatients());        String id[] = new String[patients.size()+1];        id[0]="-1";        int row=1;        for (Patient p: patients) {            id[row] = p.getContact();            row++;        }        return id;    }//    public static boolean deletePatient(Integer id){//        if(id<=0)//        {//            return false;//        }//        else {//            PatientDao.deletePatient(id);//            return true;//        }//    }    public static void deletePatient(Integer id) {        PatientDao.deletePatient(id);    }    public static Patient getPatient(Integer id){        Patient obj = PatientDao.getPatient(id);        return obj;    }    public static void updatePatient(Patient obj) {        PatientDao.updatePatient(obj);    }    public static String[][] viewSearchPatient(String type, String text) {        List<Patient> patients = new ArrayList<>(PatientDao.getAllPatients());        String data[][]=new String[patients.size()][6];        switch (type){            case "ID":                data = viewSearchPatientByID(patients,text);                break;            case "Name":                data = viewSearchPatientByName(patients,text);                break;            case "Age":                data = viewSearchPatientByAge(patients,text);                break;            case "Address":                data = viewSearchPatientByAddress(patients,text);                break;            case "Contact":                data = viewSearchPatientByContact(patients,text);                break;            case "Gender":                data = viewSearchPatientByGender(patients,text);                break;        }        return data;    }    public static String[][] viewSearchPatientByID(List<Patient> patients,String text) {        String data[][]=new String[patients.size()][6];        int row = 0;        for (Patient p : patients) {            if(p.getPatient_id() == Integer.parseInt(text))            {                data[row][0] = String.valueOf(p.getPatient_id());                data[row][1] = p.getName();                data[row][2] = String.valueOf(p.getAge());                data[row][3] = p.getAddress();                data[row][4] = p.getContact();                data[row][5] = p.getGender();                row++;            }        }        return data;    }    private static String[][] viewSearchPatientByName(List<Patient> patients, String text) {        String data[][]=new String[patients.size()][6];        int row = 0;        for (Patient p : patients) {            if(p.getName().equalsIgnoreCase(text) || p.getName().contains(text))            {                data[row][0] = String.valueOf(p.getPatient_id());                data[row][1] = p.getName();                data[row][2] = String.valueOf(p.getAge());                data[row][3] = p.getAddress();                data[row][4] = p.getContact();                data[row][5] = p.getGender();                row++;            }        }        return data;    }    private static String[][] viewSearchPatientByAge(List<Patient> patients, String text) {        String data[][]=new String[patients.size()][6];        int row = 0;        for (Patient p : patients) {            if(p.getAge() == Integer.parseInt(text))            {                data[row][0] = String.valueOf(p.getPatient_id());                data[row][1] = p.getName();                data[row][2] = String.valueOf(p.getAge());                data[row][3] = p.getAddress();                data[row][4] = p.getContact();                data[row][5] = p.getGender();                row++;            }        }        return data;    }    private static String[][] viewSearchPatientByAddress(List<Patient> patients, String text) {        String data[][]=new String[patients.size()][6];        int row = 0;        for (Patient p : patients) {            if(p.getAddress().equalsIgnoreCase(text) || p.getAddress().contains(text))            {                data[row][0] = String.valueOf(p.getPatient_id());                data[row][1] = p.getName();                data[row][2] = String.valueOf(p.getAge());                data[row][3] = p.getAddress();                data[row][4] = p.getContact();                data[row][5] = p.getGender();                row++;            }        }        return data;    }    private static String[][] viewSearchPatientByContact(List<Patient> patients, String text) {        String data[][]=new String[patients.size()][6];        int row = 0;        for (Patient p : patients) {            if(p.getContact().equalsIgnoreCase(text) || p.getContact().contains(text))            {                data[row][0] = String.valueOf(p.getPatient_id());                data[row][1] = p.getName();                data[row][2] = String.valueOf(p.getAge());                data[row][3] = p.getAddress();                data[row][4] = p.getContact();                data[row][5] = p.getGender();                row++;            }        }        return data;    }    private static String[][] viewSearchPatientByGender(List<Patient> patients, String text) {        String data[][]=new String[patients.size()][6];        int row = 0;        for (Patient p : patients) {            if(p.getGender().equalsIgnoreCase(text))            {                data[row][0] = String.valueOf(p.getPatient_id());                data[row][1] = p.getName();                data[row][2] = String.valueOf(p.getAge());                data[row][3] = p.getAddress();                data[row][4] = p.getContact();                data[row][5] = p.getGender();                row++;            }        }        return data;    }}